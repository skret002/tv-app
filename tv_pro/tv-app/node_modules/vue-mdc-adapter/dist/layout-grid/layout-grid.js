/**
* @module vue-mdc-adapterlayout-grid 0.15.4
* @exports VueMDCLayoutGrid
* @copyright (c) 2017-present, Sebastien Tasson
* @license https://opensource.org/licenses/MIT
* @implements {"material-components-web":"^0.35.2"}
* @requires {"vue":"^2.5.6"}
* @see https://github.com/stasson/vue-mdc-adapter
*/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.VueMDCLayoutGrid = factory());
}(this, (function () { 'use strict';

  function autoInit(plugin) {
    // Auto-install
    var _Vue = null;
    if (typeof window !== 'undefined') {
      _Vue = window.Vue;
    } else if (typeof global !== 'undefined') {
      /*global global*/
      _Vue = global.Vue;
    }
    if (_Vue) {
      _Vue.use(plugin);
    }
  }

  function BasePlugin(components) {
    return {
      version: '0.15.4',
      install: function install(vm) {
        for (var key in components) {
          var component = components[key];
          vm.component(component.name, component);
        }
      },
      components: components
    };
  }

  /* global CustomEvent */

  var mdcLayoutGrid = { render: function render() {
      var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.classes }, [_c('div', { staticClass: "mdc-layout-grid__inner" }, [_vm._t("default")], 2)]);
    }, staticRenderFns: [],
    name: 'mdc-layout-grid',
    props: {
      'fixed-column-width': Boolean,
      'align-left': Boolean,
      'align-right': Boolean
    },
    computed: {
      classes: function classes() {
        return {
          'mdc-layout-grid': true,
          'mdc-layout-grid--fixed-column-width': this.fixedColumnWidth,
          'mdc-layout-grid--align-left': this.alignLeft,
          'mdc-layout-grid--align-right': this.alignRight
        };
      }
    }
  };

  var spanOptions = {
    type: [String, Number],
    default: null,
    validator: function validator(value) {
      var num = Number(value);
      return isFinite(num) && num <= 12 && num > 0;
    }
  };

  var mdcLayoutCell = { render: function render() {
      var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "mdc-layout-cell mdc-layout-grid__cell", class: _vm.classes }, [_vm._t("default")], 2);
    }, staticRenderFns: [],
    name: 'mdc-layout-cell',
    props: {
      span: spanOptions,
      order: spanOptions,
      phone: spanOptions,
      tablet: spanOptions,
      desktop: spanOptions,
      align: {
        type: String,
        validator: function validator(value) {
          return ['top', 'bottom', 'middle'].indexOf(value) !== -1;
        }
      }
    },
    computed: {
      classes: function classes() {
        var classes = [];

        if (this.span) {
          classes.push("mdc-layout-grid__cell--span-" + this.span);
        }

        if (this.order) {
          classes.push("mdc-layout-grid__cell--order-" + this.order);
        }

        if (this.phone) {
          classes.push("mdc-layout-grid__cell--span-" + this.phone + "-phone");
        }

        if (this.tablet) {
          classes.push("mdc-layout-grid__cell--span-" + this.tablet + "-tablet");
        }

        if (this.desktop) {
          classes.push("mdc-layout-grid__cell--span-" + this.desktop + "-desktop");
        }

        if (this.align) {
          classes.push("mdc-layout-grid__cell--align-" + this.align);
        }

        return classes;
      }
    }
  };

  var mdcLayoutInnerGrid = { render: function render() {
      var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "mdc-layout-inner-grid mdc-layout-grid__inner" }, [_vm._t("default")], 2);
    }, staticRenderFns: [],
    name: 'mdc-layout-inner-grid'
  };

  var plugin = BasePlugin({
    mdcLayoutGrid: mdcLayoutGrid,
    mdcLayoutCell: mdcLayoutCell,
    mdcLayoutInnerGrid: mdcLayoutInnerGrid
  });

  autoInit(plugin);

  return plugin;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWdyaWQuanMiLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvYmFzZS9hdXRvLWluaXQuanMiLCIuLi8uLi9jb21wb25lbnRzL2Jhc2UvYmFzZS1wbHVnaW4uanMiLCIuLi8uLi9jb21wb25lbnRzL2Jhc2UvY3VzdG9tLWV2ZW50LmpzIiwiLi4vLi4vY29tcG9uZW50cy9sYXlvdXQtZ3JpZC9tZGMtbGF5b3V0LWdyaWQudnVlIiwiLi4vLi4vY29tcG9uZW50cy9sYXlvdXQtZ3JpZC9tZGMtbGF5b3V0LWNlbGwudnVlIiwiLi4vLi4vY29tcG9uZW50cy9sYXlvdXQtZ3JpZC9tZGMtbGF5b3V0LWlubmVyLWdyaWQudnVlIiwiLi4vLi4vY29tcG9uZW50cy9sYXlvdXQtZ3JpZC9pbmRleC5qcyIsIi4uLy4uL2NvbXBvbmVudHMvbGF5b3V0LWdyaWQvZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGF1dG9Jbml0KHBsdWdpbikge1xuICAvLyBBdXRvLWluc3RhbGxcbiAgbGV0IF9WdWUgPSBudWxsXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIF9WdWUgPSB3aW5kb3cuVnVlXG4gIH0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvKmdsb2JhbCBnbG9iYWwqL1xuICAgIF9WdWUgPSBnbG9iYWwuVnVlXG4gIH1cbiAgaWYgKF9WdWUpIHtcbiAgICBfVnVlLnVzZShwbHVnaW4pXG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBCYXNlUGx1Z2luKGNvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICB2ZXJzaW9uOiAnX19WRVJTSU9OX18nLFxuICAgIGluc3RhbGw6IHZtID0+IHtcbiAgICAgIGZvciAobGV0IGtleSBpbiBjb21wb25lbnRzKSB7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzW2tleV1cbiAgICAgICAgdm0uY29tcG9uZW50KGNvbXBvbmVudC5uYW1lLCBjb21wb25lbnQpXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnRzXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDdXN0b21FdmVudCAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZW1pdEN1c3RvbUV2ZW50KGVsLCBldnRUeXBlLCBldnREYXRhLCBzaG91bGRCdWJibGUgPSBmYWxzZSkge1xuICBsZXQgZXZ0XG4gIGlmICh0eXBlb2YgQ3VzdG9tRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZ0VHlwZSwge1xuICAgICAgZGV0YWlsOiBldnREYXRhLFxuICAgICAgYnViYmxlczogc2hvdWxkQnViYmxlXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKVxuICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZ0VHlwZSwgc2hvdWxkQnViYmxlLCBmYWxzZSwgZXZ0RGF0YSlcbiAgfVxuICBlbC5kaXNwYXRjaEV2ZW50KGV2dClcbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiA6Y2xhc3M9XCJjbGFzc2VzXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1kYy1sYXlvdXQtZ3JpZF9faW5uZXJcIj5cbiAgICAgIDxzbG90Lz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbWRjLWxheW91dC1ncmlkJyxcbiAgcHJvcHM6IHtcbiAgICAnZml4ZWQtY29sdW1uLXdpZHRoJzogQm9vbGVhbixcbiAgICAnYWxpZ24tbGVmdCc6IEJvb2xlYW4sXG4gICAgJ2FsaWduLXJpZ2h0JzogQm9vbGVhblxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGNsYXNzZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnbWRjLWxheW91dC1ncmlkJzogdHJ1ZSxcbiAgICAgICAgJ21kYy1sYXlvdXQtZ3JpZC0tZml4ZWQtY29sdW1uLXdpZHRoJzogdGhpcy5maXhlZENvbHVtbldpZHRoLFxuICAgICAgICAnbWRjLWxheW91dC1ncmlkLS1hbGlnbi1sZWZ0JzogdGhpcy5hbGlnbkxlZnQsXG4gICAgICAgICdtZGMtbGF5b3V0LWdyaWQtLWFsaWduLXJpZ2h0JzogdGhpcy5hbGlnblJpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBcbiAgICA6Y2xhc3M9XCJjbGFzc2VzXCIgXG4gICAgY2xhc3M9XCJtZGMtbGF5b3V0LWNlbGwgbWRjLWxheW91dC1ncmlkX19jZWxsXCI+XG4gICAgPHNsb3QvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5jb25zdCBzcGFuT3B0aW9ucyA9IHtcbiAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgZGVmYXVsdDogbnVsbCxcbiAgdmFsaWRhdG9yOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBudW0gPSBOdW1iZXIodmFsdWUpXG4gICAgcmV0dXJuIGlzRmluaXRlKG51bSkgJiYgbnVtIDw9IDEyICYmIG51bSA+IDBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdtZGMtbGF5b3V0LWNlbGwnLFxuICBwcm9wczoge1xuICAgIHNwYW46IHNwYW5PcHRpb25zLFxuICAgIG9yZGVyOiBzcGFuT3B0aW9ucyxcbiAgICBwaG9uZTogc3Bhbk9wdGlvbnMsXG4gICAgdGFibGV0OiBzcGFuT3B0aW9ucyxcbiAgICBkZXNrdG9wOiBzcGFuT3B0aW9ucyxcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJywgJ21pZGRsZSddLmluZGV4T2YodmFsdWUpICE9PSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBjbGFzc2VzKCkge1xuICAgICAgbGV0IGNsYXNzZXMgPSBbXVxuXG4gICAgICBpZiAodGhpcy5zcGFuKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChgbWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLSR7dGhpcy5zcGFufWApXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9yZGVyKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChgbWRjLWxheW91dC1ncmlkX19jZWxsLS1vcmRlci0ke3RoaXMub3JkZXJ9YClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGhvbmUpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGBtZGMtbGF5b3V0LWdyaWRfX2NlbGwtLXNwYW4tJHt0aGlzLnBob25lfS1waG9uZWApXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRhYmxldCkge1xuICAgICAgICBjbGFzc2VzLnB1c2goYG1kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tc3Bhbi0ke3RoaXMudGFibGV0fS10YWJsZXRgKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kZXNrdG9wKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChgbWRjLWxheW91dC1ncmlkX19jZWxsLS1zcGFuLSR7dGhpcy5kZXNrdG9wfS1kZXNrdG9wYClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYWxpZ24pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGBtZGMtbGF5b3V0LWdyaWRfX2NlbGwtLWFsaWduLSR7dGhpcy5hbGlnbn1gKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3Nlc1xuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJtZGMtbGF5b3V0LWlubmVyLWdyaWQgbWRjLWxheW91dC1ncmlkX19pbm5lclwiPlxuICAgIDxzbG90Lz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbWRjLWxheW91dC1pbm5lci1ncmlkJ1xufVxuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgeyBCYXNlUGx1Z2luIH0gZnJvbSAnLi4vYmFzZSdcbmltcG9ydCBtZGNMYXlvdXRHcmlkIGZyb20gJy4vbWRjLWxheW91dC1ncmlkLnZ1ZSdcbmltcG9ydCBtZGNMYXlvdXRDZWxsIGZyb20gJy4vbWRjLWxheW91dC1jZWxsLnZ1ZSdcbmltcG9ydCBtZGNMYXlvdXRJbm5lckdyaWQgZnJvbSAnLi9tZGMtbGF5b3V0LWlubmVyLWdyaWQudnVlJ1xuXG5leHBvcnQgeyBtZGNMYXlvdXRHcmlkLCBtZGNMYXlvdXRDZWxsLCBtZGNMYXlvdXRJbm5lckdyaWQgfVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlUGx1Z2luKHtcbiAgbWRjTGF5b3V0R3JpZCxcbiAgbWRjTGF5b3V0Q2VsbCxcbiAgbWRjTGF5b3V0SW5uZXJHcmlkXG59KVxuIiwiaW1wb3J0ICcuL3N0eWxlcy5zY3NzJ1xuaW1wb3J0IHsgYXV0b0luaXQgfSBmcm9tICcuLi9iYXNlJ1xuaW1wb3J0IHBsdWdpbiBmcm9tICcuL2luZGV4LmpzJ1xuZXhwb3J0IGRlZmF1bHQgcGx1Z2luXG5cbmF1dG9Jbml0KHBsdWdpbilcbiJdLCJuYW1lcyI6WyJhdXRvSW5pdCIsInBsdWdpbiIsIl9WdWUiLCJ3aW5kb3ciLCJWdWUiLCJnbG9iYWwiLCJ1c2UiLCJCYXNlUGx1Z2luIiwiY29tcG9uZW50cyIsInZlcnNpb24iLCJpbnN0YWxsIiwia2V5IiwiY29tcG9uZW50Iiwidm0iLCJuYW1lIiwicmVuZGVyIiwicHJvcHMiLCJCb29sZWFuIiwiY29tcHV0ZWQiLCJjbGFzc2VzIiwiZml4ZWRDb2x1bW5XaWR0aCIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJzcGFuT3B0aW9ucyIsInR5cGUiLCJTdHJpbmciLCJOdW1iZXIiLCJkZWZhdWx0IiwidmFsaWRhdG9yIiwidmFsdWUiLCJudW0iLCJpc0Zpbml0ZSIsInNwYW4iLCJvcmRlciIsInBob25lIiwidGFibGV0IiwiZGVza3RvcCIsImFsaWduIiwiaW5kZXhPZiIsInB1c2giLCJtZGNMYXlvdXRHcmlkIiwibWRjTGF5b3V0Q2VsbCIsIm1kY0xheW91dElubmVyR3JpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztFQUFPLFNBQVNBLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCO0VBQy9CO0VBQ0EsTUFBSUMsT0FBTyxJQUFYO0VBQ0EsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0VBQ2pDRCxXQUFPQyxPQUFPQyxHQUFkO0VBQ0QsR0FGRCxNQUVPLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztFQUN4QztFQUNBSCxXQUFPRyxPQUFPRCxHQUFkO0VBQ0Q7RUFDRCxNQUFJRixJQUFKLEVBQVU7RUFDUkEsU0FBS0ksR0FBTCxDQUFTTCxNQUFUO0VBQ0Q7RUFDRjs7RUNaTSxTQUFTTSxVQUFULENBQW9CQyxVQUFwQixFQUFnQztFQUNyQyxTQUFPO0VBQ0xDLGFBQVMsUUFESjtFQUVMQyxhQUFTLHFCQUFNO0VBQ2IsV0FBSyxJQUFJQyxHQUFULElBQWdCSCxVQUFoQixFQUE0QjtFQUMxQixZQUFJSSxZQUFZSixXQUFXRyxHQUFYLENBQWhCO0VBQ0FFLFdBQUdELFNBQUgsQ0FBYUEsVUFBVUUsSUFBdkIsRUFBNkJGLFNBQTdCO0VBQ0Q7RUFDRixLQVBJO0VBUUxKO0VBUkssR0FBUDtFQVVEOztFQ1hEOztBQ1NBLHNCQUFlLEVBQUNPOztLQUFELHFCQUFBO0VBQ2JELFFBQU0saUJBRE87RUFFYkUsU0FBTztFQUNMLDBCQUFzQkMsT0FEakI7RUFFTCxrQkFBY0EsT0FGVDtFQUdMLG1CQUFlQTtFQUhWLEdBRk07RUFPYkMsWUFBVTtFQUNSQyxXQURRLHFCQUNFO0VBQ1IsYUFBTztFQUNMLDJCQUFtQixJQURkO0VBRUwsK0NBQXVDLEtBQUtDLGdCQUZ2QztFQUdMLHVDQUErQixLQUFLQyxTQUgvQjtFQUlMLHdDQUFnQyxLQUFLQztFQUpoQyxPQUFQO0VBTUQ7RUFSTztFQVBHLENBQWY7O0VDQUEsSUFBTUMsY0FBYztFQUNsQkMsUUFBTSxDQUFDQyxNQUFELEVBQVNDLE1BQVQsQ0FEWTtFQUVsQkMsV0FBUyxJQUZTO0VBR2xCQyxhQUFXLG1CQUFTQyxLQUFULEVBQWdCO0VBQ3pCLFFBQUlDLE1BQU1KLE9BQU9HLEtBQVAsQ0FBVjtFQUNBLFdBQU9FLFNBQVNELEdBQVQsS0FBaUJBLE9BQU8sRUFBeEIsSUFBOEJBLE1BQU0sQ0FBM0M7RUFDRDtFQU5pQixDQUFwQjs7QUFTQSxzQkFBZSxFQUFDZjs7S0FBRCxxQkFBQTtFQUNiRCxRQUFNLGlCQURPO0VBRWJFLFNBQU87RUFDTGdCLFVBQU1ULFdBREQ7RUFFTFUsV0FBT1YsV0FGRjtFQUdMVyxXQUFPWCxXQUhGO0VBSUxZLFlBQVFaLFdBSkg7RUFLTGEsYUFBU2IsV0FMSjtFQU1MYyxXQUFPO0VBQ0xiLFlBQU1DLE1BREQ7RUFFTEcsaUJBQVcsbUJBQVNDLEtBQVQsRUFBZ0I7RUFDekIsZUFBTyxDQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLFFBQWxCLEVBQTRCUyxPQUE1QixDQUFvQ1QsS0FBcEMsTUFBK0MsQ0FBQyxDQUF2RDtFQUNEO0VBSkk7RUFORixHQUZNO0VBZWJYLFlBQVU7RUFDUkMsV0FEUSxxQkFDRTtFQUNSLFVBQUlBLFVBQVUsRUFBZDs7RUFFQSxVQUFJLEtBQUthLElBQVQsRUFBZTtFQUNiYixnQkFBUW9CLElBQVIsa0NBQTRDLEtBQUtQLElBQWpEO0VBQ0Q7O0VBRUQsVUFBSSxLQUFLQyxLQUFULEVBQWdCO0VBQ2RkLGdCQUFRb0IsSUFBUixtQ0FBNkMsS0FBS04sS0FBbEQ7RUFDRDs7RUFFRCxVQUFJLEtBQUtDLEtBQVQsRUFBZ0I7RUFDZGYsZ0JBQVFvQixJQUFSLGtDQUE0QyxLQUFLTCxLQUFqRDtFQUNEOztFQUVELFVBQUksS0FBS0MsTUFBVCxFQUFpQjtFQUNmaEIsZ0JBQVFvQixJQUFSLGtDQUE0QyxLQUFLSixNQUFqRDtFQUNEOztFQUVELFVBQUksS0FBS0MsT0FBVCxFQUFrQjtFQUNoQmpCLGdCQUFRb0IsSUFBUixrQ0FBNEMsS0FBS0gsT0FBakQ7RUFDRDs7RUFFRCxVQUFJLEtBQUtDLEtBQVQsRUFBZ0I7RUFDZGxCLGdCQUFRb0IsSUFBUixtQ0FBNkMsS0FBS0YsS0FBbEQ7RUFDRDs7RUFFRCxhQUFPbEIsT0FBUDtFQUNEO0VBN0JPO0VBZkcsQ0FBZjs7QUNYQSwyQkFBZSxFQUFDSjs7S0FBRCxxQkFBQTtFQUNiRCxRQUFNO0VBRE8sQ0FBZjs7QUNBQSxlQUFlUCxXQUFXO0VBQ3hCaUMsOEJBRHdCO0VBRXhCQyw4QkFGd0I7RUFHeEJDO0VBSHdCLENBQVgsQ0FBZjs7RUNGQTFDLFNBQVNDLE1BQVQ7Ozs7Ozs7OyJ9
